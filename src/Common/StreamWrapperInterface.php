<?php
/**
 * Copyright (C) Jyxon, Inc. All rights reserved.
 * See LICENSE for license details.
 */

namespace PhpUnified\StreamWrapper\Common;

//phpcs:disable PSR1.Methods.CamelCapsMethodName.NotCamelCaps
/**
 * An interface for a stream wrapper.
 *
 * @see http://php.net/manual/en/class.streamwrapper.php
 */
interface StreamWrapperInterface
{
    /**
     * Close directory handle.
     *
     * This method is called in response to closedir().
     * Any resources which were locked, or allocated, during opening and use of the directory stream should be released.
     *
     * @return bool
     *
     * @see closedir(): http://php.net/manual/en/function.closedir.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function dir_closedir(): bool;

    /**
     * Open directory handle.
     *
     * This method is called in response to opendir().
     *
     * @param  string $path    Specifies the URL that was passed to opendir().
     * @param  int    $options Whether or not to enforce safe_mode (0x04).
     *
     * @return bool
     *
     * @see opendir(): http://php.net/manual/en/function.opendir.php
     * @see safe_mode: http://php.net/manual/en/ini.sect.safe-mode.php#ini.safe-mode
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function dir_opendir(string $path, int $options): bool;

    /**
     * Read entry from directory handle
     *
     * This method is called in response to readdir().
     *
     * @return string
     *
     * @see readdir(): http://php.net/manual/en/function.readdir.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function dir_readdir(): string;

    /**
     * Rewind directory handle.
     *
     * This method is called in response to rewinddir().
     *
     * Should reset the output generated by streamWrapper::dir_readdir(). i.e.:
     * The next call to streamWrapper::dir_readdir() should return the first
     * entry in the location returned by streamWrapper::dir_opendir().
     *
     * @return bool
     *
     * @see rewinddir(): http://php.net/manual/en/function.rewinddir.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function dir_rewinddir(): bool;

    /**
     * Create a directory.
     *
     * This method is called in response to mkdir().
     *
     * @param  string $path    Directory which should be created.
     * @param  int    $mode    The value passed to mkdir().
     * @param  int    $options A bitwise mask of values, such as STREAM_MKDIR_RECURSIVE.
     *
     * @return bool
     *
     * @see mkdir(): http://php.net/manual/en/function.mkdir.php
     */
    public function mkdir(string $path, int $mode, int $options): bool;

    /**
     * Renames a file or directory.
     *
     * This method is called in response to rename().
     *
     * Should attempt to rename path_from to path_to.
     *
     * @param  string $path_from The URL to the current file.
     * @param  string $path_to   The URL which the path_from should be renamed to.
     *
     * @return bool
     *
     * @see rename(): http://php.net/manual/en/function.rename.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseParameterName)
     */
    public function rename(string $path_from, string $path_to): bool;

    /**
     * Removes a directory.
     *
     * This method is called in response to rmdir().
     *
     * @param  string $path    The directory URL which should be removed.
     * @param  int    $options A bitwise mask of values, such as STREAM_MKDIR_RECURSIVE.
     *
     * @return bool
     *
     * @see rmdir(): http://php.net/manual/en/function.rmdir.php
     */
    public function rmdir(string $path, int $options): bool;

    /**
     * Retrieve the underlaying resource.
     *
     * This method is called in response to stream_select().
     *
     * @param  int      $cast_as Can be STREAM_CAST_FOR_SELECT when stream_select() is calling stream_cast().
     *                           Or can be STREAM_CAST_AS_STREAM when stream_cast() is called for other uses.
     *
     * @return resource
     *
     * @see stream_select(): http://php.net/manual/en/function.stream-select.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     * @SuppressWarnings(PHPMD.CamelCaseParameterName)
     */
    public function stream_cast(int $cast_as);

    /**
     * Close a resource.
     *
     * This method is called in response to fclose().
     * All resources that were locked, or allocated, by the wrapper should be released.
     *
     * @return void
     *
     * @see fclose(): http://php.net/manual/en/function.fclose.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function stream_close(): void;

    /**
     * Tests for end-of-file on a file pointer.
     *
     * This method is called in response to feof().
     *
     * @return bool
     *
     * @see feof(): http://php.net/manual/en/function.feof.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function stream_eof(): bool;

    /**
     * Flushes the output.
     *
     * This method is called in response to fflush() and when the stream is
     * being closed while any unflushed data has been written to it before.
     * If you have cached data in your stream but not yet stored it into the
     * underlying storage, you should do so now.
     *
     * @return bool
     *
     * @see fflush(): http://php.net/manual/en/function.fflush.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function stream_flush(): bool;

    /**
     * Advisory file locking.
     *
     * This method is called in response to flock(),
     * when file_put_contents() (when flags contains LOCK_EX),
     * stream_set_blocking() and when closing the stream (LOCK_UN).
     *
     * @param  int  $operation Operation is one of the following:
     *                         LOCK_SH to acquire a shared lock (reader).
     *                         LOCK_EX to acquire an exclusive lock (writer).
     *                         LOCK_UN to release a lock (shared or exclusive).
     *                         LOCK_NB if you don't want flock() to block while locking. (not supported on Windows)
     *
     * @return bool
     *
     * @see flock(): http://php.net/manual/en/function.flock.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function stream_lock(int $operation): bool;

    /**
     * Change stream metadata.
     *
     * This method is called to set metadata on the stream.
     * It is called when one of the following functions is called on a stream URL:
     * touch()
     * chmod()
     * chown()
     * chgrp()
     *
     * @param  string $path   The file path or URL to set metadata.
     *                        Note that in the case of a URL, it must be a :// delimited URL.
     *                        Other URL forms are not supported.
     * @param  int    $option One of:
     *                        STREAM_META_TOUCH (The method was called in response to touch())
     *                        STREAM_META_OWNER_NAME (The method was called in
     *                          response to chown() with string parameter)
     *                        STREAM_META_OWNER (The method was called in response to chown())
     *                        STREAM_META_GROUP_NAME (The method was called in response to chgrp())
     *                        STREAM_META_GROUP (The method was called in response to chgrp())
     *                        STREAM_META_ACCESS (The method was called in response to chmod())
     * @param  mixed  $value  If option is:
     *                        STREAM_META_TOUCH: Array consisting of two arguments of the touch() function.
     *                        STREAM_META_OWNER_NAME or STREAM_META_GROUP_NAME:
     *                          The name of the owner user/group as string.
     *                        STREAM_META_OWNER or STREAM_META_GROUP: The value owner user/group argument as integer.
     *                        STREAM_META_ACCESS: The argument of the chmod() as integer.
     *
     * @return bool
     *
     * @see touch(): http://php.net/manual/en/function.touch.php
     * @see chmod(): http://php.net/manual/en/function.chmod.php
     * @see chown(): http://php.net/manual/en/function.chown.php
     * @see chgrp(): http://php.net/manual/en/function.chgrp.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function stream_metadata(string $path, int $option, $value): bool;

    /**
     * Opens file or URL.
     *
     * This method is called immediately after the wrapper is initialized (f.e. by fopen() and file_get_contents()).
     *
     * @param  string $path        Specifies the URL that was passed to the original function.
     * @param  string $mode        The mode used to open the file, as detailed for fopen().
     * @param  int    $options     Holds additional flags set by the streams API.
     *                             It can hold one or more of the following values OR'd together.
     *                             STREAM_USE_PATH: If path is relative, search for the resource using the include_path.
     *                             STREAM_REPORT_ERRORS: If this flag is set, you are responsible for raising errors
     *                                                   using trigger_error() during opening of the stream.
     *                                                   If this flag is not set, you should not raise any errors.
     * @param  string $opened_path If the path is opened successfully, and STREAM_USE_PATH is set in options,
     *                             opened_path should be set to the full path of the file/resource that was
     *                             actually opened.
     *
     * @return bool
     *
     * @see fopen(): http://php.net/manual/en/function.fopen.php
     * @see file_get_contents(): http://php.net/manual/en/function.file-get-contents.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     * @SuppressWarnings(PHPMD.CamelCaseParameterName)
     */
    public function stream_open(
        string $path,
        string $mode,
        int $options,
        ?string &$opened_path
    ): bool;

    /**
     * Read from stream.
     * This method is called in response to fread() and fgets().
     *
     * @param  int    $count How many bytes of data from the current position should be returned.
     *
     * @return string
     *
     * @see fread(): http://php.net/manual/en/function.fread.php
     * @see fgets(): http://php.net/manual/en/function.fgets.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function stream_read(int $count): string;

    /**
     * Seeks to specific location in a stream.
     *
     * This method is called in response to fseek().
     * The read/write position of the stream should be updated according to the offset and whence.
     *
     * @param  int    $offset The stream offset to seek to.
     * @param  int    $whence Possible values:
     *                        SEEK_SET - Set position equal to offset bytes.
     *                        SEEK_CUR - Set position to current location plus offset.
     *                        SEEK_END - Set position to end-of-file plus offset.
     *
     * @return bool
     *
     * @see fseek(): http://php.net/manual/en/function.fseek.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function stream_seek(int $offset, int $whence = SEEK_SET): bool;

    /**
     * Change stream options.
     *
     * This method is called to set options on the stream.
     *
     * @param  int  $option One of:
     *                      STREAM_OPTION_BLOCKING (The method was called in response to stream_set_blocking())
     *                      STREAM_OPTION_READ_TIMEOUT (The method was called in response to stream_set_timeout())
     *                      STREAM_OPTION_WRITE_BUFFER (The method was called in response to stream_set_write_buffer())
     * @param  int  $arg1   If option is:
     *                      STREAM_OPTION_BLOCKING: This option is not set.
     *                      STREAM_OPTION_READ_TIMEOUT: the timeout in microseconds.
     *                      STREAM_OPTION_WRITE_BUFFER: the requested buffer size.
     * @param  int  $arg2   If option is:
     *                      STREAM_OPTION_BLOCKING: This option is not set.
     *                      STREAM_OPTION_READ_TIMEOUT: the timeout in microseconds.
     *                      STREAM_OPTION_WRITE_BUFFER: the requested buffer size.
     *
     * @return bool
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function stream_set_option(int $option, int $arg1, int $arg2): bool;

    /**
     * Retrieve information about a file resource.
     *
     * This method is called in response to fstat().
     *
     * @return array
     *
     * @see fstat(): http://php.net/manual/en/function.fstat.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function stream_stat(): array;

    /**
     * Retrieve the current position of a stream.
     *
     * This method is called in response to fseek() to determine the current position.
     *
     * @return int
     *
     * @see fseek(): http://php.net/manual/en/function.fseek.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function stream_tell(): int;

    /**
     * Truncate stream.
     *
     * Will respond to truncation, e.g., through ftruncate().
     *
     * @param  int  $new_size The new size.
     *
     * @return bool
     *
     * @see ftruncate(): http://php.net/manual/en/function.ftruncate.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     * @SuppressWarnings(PHPMD.CamelCaseParameterName)
     */
    public function stream_truncate(int $new_size): bool;

    /**
     * Write to stream.
     *
     * This method is called in response to fwrite().
     *
     * @param  string $data Should be stored into the underlying stream.
     *
     * @return int
     *
     * @see fwrite(): http://php.net/manual/en/function.fwrite.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function stream_write(string $data): int;

    /**
     * Delete a file.
     *
     * This method is called in response to unlink().
     *
     * @param  string $path The file URL which should be deleted.
     *
     * @return bool
     *
     * @see unlink(): http://php.net/manual/en/function.unlink.php
     */
    public function unlink(string $path): bool;

    /**
     * Retrieve information about a file.
     *
     * This method is called in response to all stat() related functions, such as:
     * chmod() (only when safe_mode is enabled)
     * copy()
     * fileperms()
     * fileinode()
     * filesize()
     * fileowner()
     * filegroup()
     * fileatime()
     * filemtime()
     * filectime()
     * filetype()
     * is_writable()
     * is_readable()
     * is_executable()
     * is_file()
     * is_dir()
     * is_link()
     * file_exists()
     * lstat()
     * stat()
     * SplFileInfo::getPerms()
     * SplFileInfo::getInode()
     * SplFileInfo::getSize()
     * SplFileInfo::getOwner()
     * SplFileInfo::getGroup()
     * SplFileInfo::getATime()
     * SplFileInfo::getMTime()
     * SplFileInfo::getCTime()
     * SplFileInfo::getType()
     * SplFileInfo::isWritable()
     * SplFileInfo::isReadable()
     * SplFileInfo::isExecutable()
     * SplFileInfo::isFile()
     * SplFileInfo::isDir()
     * SplFileInfo::isLink()
     * RecursiveDirectoryIterator::hasChildren()
     *
     * @param  string $path  The file path or URL to stat.
     *                       Note that in the case of a URL, it must be a :// delimited URL.
     *                       Other URL forms are not supported.
     * @param  int    $flags Holds additional flags set by the streams API.
     *                       It can hold one or more of the following values OR'd together.
     *                       STREAM_URL_STAT_LINK: For resources with the ability to link to other resource
     *                                             (such as an HTTP Location: forward, or a filesystem symlink).
     *                                             This flag specified that only information about the link
     *                                             itself should be returned, not the resource pointed to by the link.
     *                                             This flag is set in response to calls to
     *                                             lstat(), is_link(), or filetype().
     *
     * @return array
     *
     * @see stat(): http://php.net/manual/en/function.stat.php
     *
     * @SuppressWarnings(PHPMD.CamelCaseMethodName)
     */
    public function url_stat(string $path, int $flags): array;
}
